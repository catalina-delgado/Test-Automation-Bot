{"name": "test_price", "status": "broken", "statusDetails": {"message": "Exception: The element is not interactive or not enabled to continue with flight options.", "trace": "self = <objects.price_flow.PriceFlow object at 0x000001A13FF15E80>\n\n    @allure.step(\"Flight Verification\")\n    def select_continue(self):\n        try:\n>           self.page.click_element(self.CONTINUE_BUTTON)\n\nobjects\\price_flow.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlibs\\base_page.py:37: in click_element\n    self.driver.find_element(*by_locator).click()\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A1410B82F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF61F17BD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD9CF7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD9D0CAF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=130.0.6723.59)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF61F4EE1F5+2972373]\nE       \t(No symbol) [0x00007FF61F1855F0]\nE       \t(No symbol) [0x00007FF61F025629]\nE       \t(No symbol) [0x00007FF61F076EDF]\nE       \t(No symbol) [0x00007FF61F06992E]\nE       \t(No symbol) [0x00007FF61F09BA7A]\nE       \t(No symbol) [0x00007FF61F069266]\nE       \t(No symbol) [0x00007FF61F09BC90]\nE       \t(No symbol) [0x00007FF61F0BB8CC]\nE       \t(No symbol) [0x00007FF61F09B823]\nE       \t(No symbol) [0x00007FF61F0675E8]\nE       \t(No symbol) [0x00007FF61F068751]\nE       \tGetHandleVerifier [0x00007FF61F5147BD+3129501]\nE       \tGetHandleVerifier [0x00007FF61F564D00+3458528]\nE       \tGetHandleVerifier [0x00007FF61F55B05D+3418429]\nE       \tGetHandleVerifier [0x00007FF61F2E687B+844123]\nE       \t(No symbol) [0x00007FF61F190AFF]\nE       \t(No symbol) [0x00007FF61F18C6D4]\nE       \t(No symbol) [0x00007FF61F18C86D]\nE       \t(No symbol) [0x00007FF61F17BD79]\nE       \tBaseThreadInitThunk [0x00007FFD9CF7257D+29]\nE       \tRtlUserThreadStart [0x00007FFD9D0CAF08+40]\n\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_case_1.TestBookingOneWay object at 0x000001A13FFB6210>\n\n    def test_price(self):\n        #Price\n        event = PriceFlow(self.driver)\n        event.object.wait_for_new_page()\n        event.select_basic_price()\n>       event.select_continue()\n\ntests\\test_case_1.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <objects.price_flow.PriceFlow object at 0x000001A13FF15E80>\n\n    @allure.step(\"Flight Verification\")\n    def select_continue(self):\n        try:\n            self.page.click_element(self.CONTINUE_BUTTON)\n            self.object.validate_http_status(self.driver.current_url)\n    \n        except ElementNotInteractableException as e:\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"ElementNotInteractableException screenshot\", attachment_type=allure.attachment_type.PNG)\n>           raise Exception(f\"The element is not interactive or not enabled to continue with flight options.\")\nE           Exception: The element is not interactive or not enabled to continue with flight options.\n\nobjects\\price_flow.py:61: Exception"}, "steps": [{"name": "Basic price option Verification", "status": "passed", "start": 1729474332318, "stop": 1729474333416}, {"name": "Flight Verification", "status": "broken", "statusDetails": {"message": "Exception: The element is not interactive or not enabled to continue with flight options.\n", "trace": "  File \"C:\\Users\\Catalina\\Documents\\FLYR\\env\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Catalina\\Documents\\FLYR\\Test_Automation\\objects\\price_flow.py\", line 61, in select_continue\n    raise Exception(f\"The element is not interactive or not enabled to continue with flight options.\")\n"}, "attachments": [{"name": "ElementNotInteractableException screenshot", "source": "ce6bfbed-7f8f-4f99-a963-21c8fa0fc830-attachment.png", "type": "image/png"}], "start": 1729474333416, "stop": 1729474333593}], "attachments": [{"name": "stdout", "source": "2907b6a1-e4b6-4510-beb4-c11b7faf9110-attachment.txt", "type": "text/plain"}], "start": 1729474327317, "stop": 1729474333599, "uuid": "c9068619-ed69-49d1-b6f1-2078bb5a3ad4", "historyId": "385ee229192decceed7cdd74e8c686be", "testCaseId": "385ee229192decceed7cdd74e8c686be", "fullName": "tests.test_case_1.TestBookingOneWay#test_price", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_case_1"}, {"name": "subSuite", "value": "TestBookingOneWay"}, {"name": "host", "value": "LAPTOP-DDOU6HGD"}, {"name": "thread", "value": "35808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_case_1"}]}